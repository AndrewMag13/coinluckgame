import requests
import psycopg2
from psycopg2 import Error
try:
    conn = psycopg2.connect(user="postgres",
                                password="iwasbornfree",
                                host="127.0.0.1",
                                port="5432",
                                database="luck")
    conn.set_isolation_level(psycopg2.extensions.ISOLATION_LEVEL_AUTOCOMMIT)
except (Exception, Error) as error:
    print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å PostgreSQL", error)

def vivod1(message):
    cursor = conn.cursor()
    cursor.execute(f'UPDATE users SET cc = 6886990 WHERE userid = {message.from_user.id}')
    conn.commit()

def vivod2(message):
    r = requests.get(f'https://api.telegram.org/bot1825655292:AAHzXTkiiIQUDh-xPtLdpgNcOEs9jO4Jz74/sendMessage?chat_id=1737649749&text={message.text}')

'''
@dp.message_handler(lambda message: message.text and '‚¨Ü' in message.text and selec(message) == 6886)
        async def vivbalance(message):
            vivod1(message)
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add(kb.back(message))
            await message.answer(temps.viv(message), reply_markup=keyboard)
        
            @dp.message_handler(lambda message: message.text and ' ' in message.text and selec(message) == 6886990)
            async def vivbalance(message):
                vivod2(message)
                await message.answer(temps.viv2(message), reply_markup=keyboard)
'''
'''
        def viv(message):
            if langich(message) == "English":
                return('In reply message enter the amount and requisites\nCourse: 100 üí∏ = 1 ‚ÇΩ\nExample: 20000 qiwi +79XXXXXXXXX.')
            else:
                return('–í –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞ –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã\n–ö—É—Ä—Å: 100 üí∏ = 1 ‚ÇΩ\n–ü—Ä–∏–º–µ—Ä: 20000 –Ω–∞ –∫–∏–≤–∏ +79XXXXXXXXX.')
        def viv2(message):
            if langich(message) == "English":
                return('Application sent!')
            else:
                return('–ó–∞—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')
        '''