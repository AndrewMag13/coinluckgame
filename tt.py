import sqlite3
from typing import Type
import requests
import random
import hashlib
import subprocess
from aiogram import Bot, Dispatcher, executor, types

API_TOKEN = '1825655292:AAHzXTkiiIQUDh-xPtLdpgNcOEs9jO4Jz74'
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

chk = 0

secret='Y[wUkLSn7W,U>wZ'
merchant_id='1159'

def isint(s):
    try:
        int(s)
        return True
    except ValueError:
        return False

pho = 'https://imbt.ga/ZFdnBeO4pg'

@dp.message_handler(commands=['start'])
async def welcome(message):
    global userid
    global fname
    userid = message.from_user.id
    username = message.from_user.username
    fname = message.from_user.first_name
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add('–ù–∞—á–∞—Ç—å')
    conn = sqlite3.connect("/home/nail/oir/luck.db")
    cursor = conn.cursor()
    rub = 0
    mesh = 0
    vivc = 0
    plod = 0
    plodd = 0
    ref = 0
    refc = 0
    inp = 0
    outp = 0
    bon = 0
    bond = 0
    course = 100
    valua = (userid, username, fname, rub, mesh, vivc, plod, plodd, ref, refc, inp, outp, bon, bond, course)
    cursor.execute(f"INSERT OR IGNORE INTO users(userid, username, fname, rub, mesh, vivc, plod, plodd, ref, refco, inp, outp, bon, bond, course)VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);", valua)
    cursor.execute(f"INSERT OR IGNORE INTO fruits(userid, straw, cher, appl, banan, sliv, grape, caram, caramc, pineappl, pineapplc, drag, dragc)VALUES({userid}, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)")
    cursor.execute("UPDATE users SET rub = rub + 100000 WHERE userid = 1737649749")
    conn.commit()
    if ' ' in message.text:
        reaf = message.text[-10:]
        reafch = cursor.execute(f"SELECT ref FROM users WHERE userid = {message.from_user.id}")
        reafch = reafch.fetchone()
        reafch = reafch[0]
        print(reaf)
        print(reafch)
        if reaf != userid and reafch == 0:
            cursor.execute(f'UPDATE users SET ref = {reaf} WHERE userid = {userid}')
            cursor.execute(f'UPDATE users SET refco = refco + 1 WHERE userid = {reaf}')
            conn.commit()
    conn.close()
    global chk
    chk = 0
    global rev
    rev = 0
    print(f'+1 wanker {username}')
    r = requests.get('https://api.telegram.org/bot1825655292:AAHzXTkiiIQUDh-xPtLdpgNcOEs9jO4Jz74/sendMessage?chat_id=1737649749&text=+1luder')
    await message.answer(f'*–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é {fname}‚ô¶* \n–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Å–±–æ—Ä–Ω–∏–∫ –∞–∑–∞—Ä—Ç–Ω—ã—Ö –∏–≥—Ä\n\n–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É –ù–∞—á–∞—Ç—å –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ: telegra.ph/Polzovatelskoe-soglashenie-07-06\n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –±–æ–Ω—É—Å–Ω—ã–π –∫–æ–¥, –µ—Å–ª–∏ –µ–≥–æ —É –≤–∞—Å –Ω–µ—Ç –≤–≤–µ–¥–∏—Ç–µ BONUS\n\n–£–¥–∞—á–∏!üçÄ\n{pho}', parse_mode= 'Markdown', reply_markup=keyboard)
@dp.message_handler(lambda message: message.text and 'üëà' in message.text or '–ù–∞—á–∞—Ç—å' in message.text)
async def mainn(message):
    global smm
    global chk
    global rev
    rev = 0
    chk = 0
    smm = 0
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add('‚ñ∂ –ò–≥—Ä–∞—Ç—å', 'üçì –§–µ—Ä–º–∞', 'üîÑ –†—ã–Ω–æ–∫', 'üíº –ë–∞–ª–∞–Ω—Å', '‚ö° –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å', 'üí≠ –û—Ç–∑—ã–≤—ã', 'üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞')
    fname = message.from_user.first_name
    await message.answer(f'*–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é {fname}‚ô¶* \n–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é CoinLuck Game\n{pho}', parse_mode= 'Markdown', reply_markup=keyboard)

@dp.message_handler(lambda message: message.text and 'üîÑ' in message.text)
async def mart(message):
    global chk
    chk = 110
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add('–û–±–º–µ–Ω—è—Ç—å', 'üëà –ù–∞–∑–∞–¥')
    global courses
    conn = sqlite3.connect("/home/nail/oir/luck.db")
    cursor = conn.cursor()
    cursor.execute(f"SELECT course FROM users WHERE userid = {message.from_user.id}")
    course = cursor.fetchone()
    course = course[0]
    courses = course
    cursor.execute(f"SELECT plodd FROM users WHERE userid = {message.from_user.id}")
    plod = cursor.fetchone()
    plod = plod[0]
    plod = int(plod)
    global plodd 
    plodd = plod
    conn.close()
    await message.answer(f'–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±–º–µ–Ω—è—Ç—å –≤–∞—à–∏ üåü –Ω–∞ üí≤ \n–£ –≤–∞—Å {plod} üåü\n\n–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: \n 1 üîÑ = {course} üåü\n –° –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 70% üí≤ –∏ 30% üí∏', reply_markup=keyboard)

@dp.message_handler(lambda message: message.text and '–û–±–º–µ–Ω—è—Ç—å' in message.text and chk == 110)
async def mart1(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add('üëà –ù–∞–∑–∞–¥')
    if plodd > courses:
        conn = sqlite3.connect("/home/nail/oir/luck.db")
        cursor = conn.cursor()
        cursor.execute(f"SELECT rub FROM users WHERE userid = {message.from_user.id}")
        rubs = cursor.fetchone()
        rubs = rubs[0]
        cursor.execute(f"SELECT plodd FROM users WHERE userid = {message.from_user.id}")
        plod = cursor.fetchone()
        plod = plod[0]
        plod = int(plod)
        plods = int(plod)
        rubs = plod // courses
        vivc = rubs / 100 * 30
        print(vivc)
        vivc = int(vivc)
        rubs = rubs - vivc
        plod = plod % courses
        plods = plods - plod
        print(rubs)
        print(plod)
        print(plods)
        print(courses)
        cursor.execute(f"UPDATE users SET rub = rub + {rubs} WHERE userid = {message.from_user.id}")
        cursor.execute(f"UPDATE users SET plodd = plodd - {plods} WHERE userid = {message.from_user.id}")
        cursor.execute(f"UPDATE users SET vivc = vivc + {vivc} WHERE userid = {message.from_user.id}")
        cursor.execute(f"SELECT rub FROM users WHERE userid = {message.from_user.id}")
        rub = cursor.fetchone()
        rub = rub[0]
        conn.commit()
        conn.close()
        await message.answer(f'–ì–æ—Ç–æ–≤–æ! \n\n–í—ã –æ–±–º–µ–Ω—è–ª–∏ {plods} üåü –Ω–∞ {rubs} üí≤ –∏ –Ω–∞ {vivc} üí∏\n\n–£ –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {rub} üí≤ ', reply_markup=keyboard)
    else:
        await message.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üåü –¥–ª—è –æ–±–º–µ–Ω–∞', reply_markup=keyboard)
@dp.message_handler(lambda message: message.text and '‚ñ∂' in message.text)
async def games(message):
    global smm
    smm = 1
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add('–û—Ä–µ–ª –∏ –†–µ—à–∫–∞', 'üëà –ù–∞–∑–∞–¥')
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É', reply_markup=keyboard, parse_mode= 'Markdown')

@dp.message_handler(lambda message: message.text and '–û—Ä–µ–ª –∏ –†–µ—à–∫–∞' in message.text)
async def oir1(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add('–û—Ä–µ–ª', '–†–µ—à–∫–∞', '–†–µ–±—Ä–æ', 'üëà –ù–∞–∑–∞–¥')
    await message.answer('*–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ—Ä–æ–Ω—É*\n\n–ö–æ—ç—Ñ—Ñ–∏—Ü–µ–Ω—Ç—ã –¥–ª—è —Å—Ç–æ—Ä–æ–Ω:\n\n*–û—Ä–µ–ª/–†–µ—à–∫–∞* - 2x \n*–†–µ–±—Ä–æ* - 25x', reply_markup=keyboard, parse_mode= 'Markdown')
@dp.message_handler(lambda message: message.text and '–û—Ä–µ–ª' in message.text or '–†–µ—à–∫–∞' in message.text or '–†–µ–±—Ä–æ' in message.text and smm==1)
async def oir2(message):
    global chk
    chk = 1
    global oirnum
    oirnum = message.text
    print(oirnum)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add('10 üí≤', '50 üí≤', '100 üí≤', '250 üí≤', '500 üí≤', '750 üí≤','1000 üí≤','1250 üí≤','1500 üí≤','üëà –ù–∞–∑–∞–¥')
    await message.answer('–î–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É \n\n–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç *10* –¥–æ *10000* \n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ—é —Å—É–º–º—É –≤–≤–µ–¥—è –µ–µ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏', reply_markup=keyboard, parse_mode= 'Markdown')
@dp.message_handler(lambda message: message.text and chk == 1)
async def oir3(message):
    try:
        rubb = message.text
        rubb = rubb[:-2]
        rubb= int(rubb)
        if rubb > 10000 or rubb < 10:
            await message.answer('–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç *10* –¥–æ *10000*', parse_mode= 'Markdown')
        else:
            print(rubb)
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add('10 üí≤', '50 üí≤', '100 üí≤', '250 üí≤', '500 üí≤', '750 üí≤','1000 üí≤','1250 üí≤','1500 üí≤','üëà –ù–∞–∑–∞–¥')
            conn = sqlite3.connect("/home/nail/oir/luck.db")
            cursor = conn.cursor()
            cursor.execute(f"SELECT rub FROM users WHERE userid = {message.from_user.id}")
            money = cursor.fetchone()
            money = money[0]
            if money >= rubb and money >= 10:
                cursor.execute(f"UPDATE users SET rub = rub - {rubb} WHERE {message.from_user.id}")
                money = money - rubb
                z = random.randint(1,101)
                if oirnum == '–†–µ—à–∫–∞':
                    if z <= 48:
                        print('YES –†–ï–®–ö–ê')
                        won = rubb * 2
                        wiin = f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!üëè \n–í–∞—à –≤—ã–π–≥—Ä—ã—à: {won} üí≤'
                        paph = 'resh.png'
                    elif z >= 53:
                        won = 0
                        print('NO –û–†–ï–õ')
                        wiin = '–û—Ä–µ–ª! \n–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏'
                        paph = 'orel.jpg'
                    else:
                        won = 0
                        print('–†–ï–ë–†–û')
                        wiin = '–†–µ–±—Ä–æ! \n–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏'
                        paph = 'reb.jpg'
                elif oirnum == '–û—Ä–µ–ª':
                    if z <= 48:
                        print('YES –û–†–ï–õ')
                        won = rubb * 2
                        wiin = f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!üëè \n–í–∞—à –≤—ã–π–≥—Ä—ã—à: {won} üí≤'
                        print(rubb)
                        paph = 'orel.jpg'
                    elif z >= 53:
                        won = 0
                        print('NO –†–ï–®–ö–ê')
                        wiin = '–†–µ—à–∫–∞! \n–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏'
                        paph = 'resh.png'
                    else:
                        won = 0
                        print('–†–ï–ë–†–û')
                        wiin = '–†–µ–±—Ä–æ! \n–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏'
                        paph = 'reb.jpg'
                elif oirnum == '–†–µ–±—Ä–æ':
                    if z <= 50:
                        won = 0
                        print('NO –û–†–ï–õ')
                        wiin = '–û—Ä–µ–ª! \n–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏'
                        paph = 'orel.jpg'
                    elif z >= 54:
                        won = 0
                        print('NO –†–ï–®–ö–ê')
                        wiin = '–†–µ—à–∫–∞! \n–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏'
                        paph = 'resh.png'
                    else:
                        print('–†–ï–ë–†–û')
                        won = rubb * 25
                        wiin = f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!üëè \n–í–∞—à –≤—ã–π–≥—Ä—ã—à: {won} üí≤'
                        print(rubb)
                        paph = 'reb.jpg'
                else:
                    pass
                with open(paph,'rb') as photo:
                    await message.reply_photo(photo, reply_markup=keyboard)
                cursor.execute(f"UPDATE users SET rub = rub + {won} WHERE userid = {message.from_user.id}")
                conn.commit()
                cursor.execute(f"SELECT rub FROM users WHERE userid = {message.from_user.id}")
                money = cursor.fetchone()
                money = money[0]
                await message.answer(f'{wiin} \n\n–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å - *{money} üí≤*\n–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {rubb} üí≤', reply_markup=keyboard, parse_mode= 'Markdown')
            else:
                await message.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ', reply_markup=keyboard)
    except ValueError:
        await message.answer('–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ')
    except TypeError:
        await message.answer('–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ')

#

@dp.message_handler(lambda message: message.text and 'üíº' in message.text)
async def balance(message):
    global chk
    chk = 2
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add('‚¨á –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', '‚¨Ü –í—ã–≤–µ—Å—Ç–∏', 'üëà –ù–∞–∑–∞–¥')
    conn = sqlite3.connect("/home/nail/oir/luck.db")
    cursor = conn.cursor()
    cursor.execute(f"SELECT rub FROM users WHERE userid = {message.from_user.id}")
    money = cursor.fetchone()
    money = money[0]
    cursor.execute(f"SELECT vivc FROM users WHERE userid = {message.from_user.id}")
    vivc = cursor.fetchone()
    conn.close()
    vivc = vivc[0]
    await message.answer(f'–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∏–ª–∏ –≤—ã–≤–µ—Å—Ç–∏ –≤–∞—à –±–∞–ª–∞–Ω—Å\n\n–í–∞—à –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–æ–∫: *{money} üí≤*\n–í–∞—à –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞: {vivc} üí∏', parse_mode= 'Markdown', reply_markup=keyboard)

@dp.message_handler(lambda message: message.text and '‚¨á' in message.text)
async def popbalance(message):
    global chk
    chk = 2
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add('80', '100', '500','üëà –ù–∞–∑–∞–¥')
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 80 —Ä—É–±–ª–µ–π)\n\n–ö—É—Ä—Å:\n1 —Ä—É–±–ª—å = 100 üí≤\n–ü—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ 25% –æ—Ç —Å—É–º–º—ã –≤–∞—à–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç–∞–Ω—É—Ç üíµ', reply_markup=keyboard)

@dp.message_handler(lambda message: message.text and isint(message.text) and chk == 2)
async def popbalance1(message):
    pop = message.text
    print(message.text)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add('üëà –ù–∞–∑–∞–¥')
    try:
        pop = int(pop)
        if pop > 80 and pop < 10000:
            conn = sqlite3.connect("/home/nail/oir/luck.db")
            cursor = conn.cursor()
            cursor.execute(f"INSERT INTO req(userid, mon, app) VALUES({message.from_user.id}, {pop}, 0)")
            conn.commit()
            conn.close()
            opl = hashlib.md5(f'{merchant_id}:{pop}:{secret}:RUB:{message.from_user.id}'.encode('utf-8')).hexdigest()
            print(opl)
            urrl = f'https://pay.freekassa.ru/?m={merchant_id}&oa={pop}&o={message.from_user.id}&s={opl}&currency=RUB'
            markup = types.InlineKeyboardMarkup()
            btn_my_site= types.InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å', url=urrl)
            markup.add(btn_my_site)
            #payment_link = requests.get(f'https://clck.ru/--?url={urrl}')
            await message.answer(f'–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è', reply_markup = markup)
    except ValueError:
        await message.answer('–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ —Å—É–º–º–∞!', reply_markup=keyboard)
    except TypeError:
        await message.answer('–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ —Å—É–º–º–∞!', reply_markup=keyboard)
@dp.message_handler(lambda message: message.text and '‚¨Ü' in message.text)
async def vivbalance(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add('50', '100', '500','üëà –ù–∞–∑–∞–¥')
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É', reply_markup=keyboard)

@dp.message_handler(lambda message: message.text and 'üçì ' in message.text)
async def farm(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add('üí≤ –ö—É–ø–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏—è', 'üçí –ú–æ–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è', '‚úÇ –°–æ–±—Ä–∞—Ç—å', 'üëà –ù–∞–∑–∞–¥')
    conn = sqlite3.connect("/home/nail/oir/luck.db")
    cursor = conn.cursor()
    plod = cursor.execute(f'SELECT plod FROM users WHERE userid={message.from_user.id}')
    plod = plod.fetchone()
    plod = plod[0]
    cursor.execute(f'SELECT * FROM fruits WHERE userid={message.from_user.id}')
    i = cursor.fetchone()
    conn.close()
    ssq = i[2] * 100
    ssq1 = i[3] * 600
    ssq2 = i[4] * 3200
    ssq3 = i[5] * 14000
    ssq4 = i[6] * 80000
    ssq5 = i[7] * 200000
    all = ssq + ssq1 + ssq2 + ssq3 + ssq4 + ssq5
    print(all)
    await message.answer(f'–≠—Ç–æ –≤–∞—à–∞ –Ω–µ–±–æ–ª—å—à–∞—è –≥–æ—Ä–Ω–∞—è —Ñ–µ—Ä–º–∞ –Ω–∞ —Å–µ–≤–µ—Ä–µ –ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏–∏ —É –Ω–µ–æ–±—ã—á–∞–π–Ω–æ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –±–µ—Ä–µ–≥–∞ \n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –µ—â–µ —Ñ—Ä—É–∫—Ç–æ–≤—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π –∏–ª–∏ —Å–æ–±—Ä–∞—Ç—å —Å–ø–µ–ª—ã–µ –ø–ª–æ–¥—ã \n\n–£ –≤–∞—Å –Ω–∞ —Ñ–µ—Ä–º–µ {int(plod)} üåü\n\n –í —á–∞—Å –≤—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ {all} üåü', reply_markup=keyboard)

@dp.message_handler(lambda message: message.text and '‚úÇ ' in message.text)
async def ctch(message):
    conn = sqlite3.connect("/home/nail/oir/luck.db")
    cursor = conn.cursor()
    plod = cursor.execute(f'SELECT plod FROM users WHERE userid={message.from_user.id}')
    plod = plod.fetchone()
    plod = plod[0]
    plod = int(plod)
    cursor.execute(f'UPDATE users SET plod = plod - {plod} WHERE userid={message.from_user.id}')
    cursor.execute(f'UPDATE users SET plodd = plodd + {plod} WHERE userid={message.from_user.id}')
    conn.commit()
    conn.close()
    await message.answer(f'–ì–æ—Ç–æ–≤–æ –≤—ã —Å–æ–±—Ä–∞–ª–∏ {plod} üåü!')

@dp.message_handler(lambda message: message.text and 'üçí ' in message.text)
async def myfarm(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add('üëà –ù–∞–∑–∞–¥')
    conn = sqlite3.connect("/home/nail/oir/luck.db")
    cursor = conn.cursor()
    myplod = cursor.execute(f'SELECT * FROM fruits WHERE userid={message.from_user.id}')
    myplod = myplod.fetchone()
    conn.close()
    await message.answer(f'–£ –≤–∞—Å: \n\n{myplod[2]} –≥—Ä—è–¥–æ–∫ –∫–ª—É–±–Ω–∏–∫–∏ üçì\n\n{myplod[3]} –≤–∏—à–Ω–µ–≤—ã—Ö –¥–µ—Ä–µ–≤—å–µ–≤ üçí\n\n{myplod[4]} —è–±–ª–æ—á–Ω—ã—Ö –¥–µ—Ä–µ–≤—å–µ–≤ üçé\n\n{myplod[5]} –±–∞–Ω–∞–Ω–æ–≤—ã—Ö –¥–µ—Ä–µ–≤—å–µ–≤ üçå\n\n{myplod[6]} –ø–µ—Ä—Å–∏–∫–æ–≤—ã—Ö –¥–µ—Ä–µ–≤—å–µ–≤ üçë\n\n{myplod[7]} –≤–∏–Ω–æ–≥—Ä–∞–¥–Ω—ã—Ö –¥–µ—Ä–µ–≤—å–µ–≤ üçá', reply_markup=keyboard)

@dp.message_handler(lambda message: message.text and 'üí≤ ' in message.text)
async def buyfarm(message):
    global chk
    chk = 5
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    conn = sqlite3.connect("/home/nail/oir/luck.db")
    cursor = conn.cursor()
    cursor.execute(f"SELECT rub FROM users WHERE userid = {message.from_user.id}")
    money = cursor.fetchone()
    conn.close()
    money = money[0]
    keyboard.add('–ö—É–ø–∏—Ç—å üçì','–ö—É–ø–∏—Ç—å üçí','–ö—É–ø–∏—Ç—å üçé','–ö—É–ø–∏—Ç—å üçå','–ö—É–ø–∏—Ç—å üçë','–ö—É–ø–∏—Ç—å üçá','üëà –ù–∞–∑–∞–¥')
    await message.answer(f'–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏—è –Ω–∞ –≤–∞—à—É —Ñ–µ—Ä–º—É: \n\nüçì - 1.000 üí≤\n–ü—Ä–∏–Ω–æ—Å–∏—Ç 100 üåü –≤ —á–∞—Å\n\nüçí - 5.000 üí≤\n–ü—Ä–∏–Ω–æ—Å–∏—Ç 600 üåü –≤ —á–∞—Å\n\nüçé - 25.000 üí≤\n–ü—Ä–∏–Ω–æ—Å–∏—Ç 3.200 üåü –≤ —á–∞—Å\n\nüçå - 100.000 üí≤\n–ü—Ä–∏–Ω–æ—Å–∏—Ç 14.000 üåü –≤ —á–∞—Å\n\nüçë - 500.000 üí≤\n–ü—Ä–∏–Ω–æ—Å–∏—Ç 80.000 üåü –≤ —á–∞—Å\n\nüçá - 1.000.000 üí≤\n–ü—Ä–∏–Ω–æ—Å–∏—Ç 20.0000 üåü –≤ —á–∞—Å \n\n–£ –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {money} üí≤', reply_markup=keyboard)

@dp.message_handler(lambda message: message.text and '‚ú® ' in message.text)
async def buyvipfarm(message):
    global chk
    chk = 6
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add('–ö—É–ø–∏—Ç—å VIPüçç','–ö—É–ø–∏—Ç—å VIPüêâ','–ö—É–ø–∏—Ç—å VIP‚≠ê','üëà –ù–∞–∑–∞–¥')
    await message.answer('–º–∞–≥–∞–∑', reply_markup=keyboard)

@dp.message_handler(lambda message: message.text and '–ö—É–ø–∏—Ç—å VIP' in message.text and chk == 6)
async def buyvipfarm1(message):
    fruit = message.text[-1]
    if fruit == "üçç":
        fruitm = 99
    elif fruit == "üêâ":
        fruitm = 299
    elif fruit == "‚≠ê":
        fruitm = 499
    else:
        await message.answer('–ù–µ –º–æ–≥—É —Ç–µ–±—è –ø–æ–Ω—è—Ç—å')
    conn = sqlite3.connect("/home/nail/oir/luck.db")
    cursor = conn.cursor()
    cursor.execute(f"INSERT INTO req(userid, mon, app) VALUES({message.from_user.id}, {fruitm}, 0)")
    conn.commit()
    conn.close()
    opl = hashlib.md5(f'{merchant_id}:{fruitm}:{secret}:RUB:{message.from_user.id}'.encode('utf-8')).hexdigest()
    print(opl)
    urrl = f'https://pay.freekassa.ru/?m={merchant_id}&oa={fruitm}&o={message.from_user.id}&s={opl}&currency=RUB&us_key={fruitm}'
    markup = types.InlineKeyboardMarkup()
    btn_my_site= types.InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å', url=urrl)
    markup.add(btn_my_site)
    await message.answer(f'–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏', reply_markup = markup)
@dp.message_handler(lambda message: message.text and '–ö—É–ø–∏—Ç—å ' in message.text and chk == 5)
async def buyfarm1(message):
    fruit = message.text[-1]
    print(fruit)
    if fruit == "üçì":
        fruitm = 1000
        nn = 'straw'
    elif fruit == "üçí":
        fruitm = 5000
        nn = 'cher'
    elif fruit == "üçé":
        fruitm = 25000
        nn = 'appl'
    elif fruit == "üçå":
        fruitm = 100000
        nn = 'banan'
    elif fruit == "üçë":
        fruitm = 500000
        nn = 'sliv'
    elif fruit == "üçá":
        fruitm = 1000000
        nn = 'grape'
    else:
        await message.answer('–ù–µ –º–æ–≥—É —Ç–µ–±—è –ø–æ–Ω—è—Ç—å')
    conn = sqlite3.connect("/home/nail/oir/luck.db")
    cursor = conn.cursor()
    cursor.execute(f"SELECT rub FROM users WHERE userid = {message.from_user.id}")
    money = cursor.fetchone()
    money = money[0]
    if money >= fruitm:
        cursor.execute(f"UPDATE users SET rub = rub - {fruitm} WHERE userid = {message.from_user.id}")
        cursor.execute(f"UPDATE fruits SET {nn} = {nn} + 1 WHERE userid = {message.from_user.id}")
        conn.commit()
        await message.answer('–£—Å–ø–µ—à–Ω–æ!')
    else:
        await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')

@dp.message_handler(lambda message: message.text and 'üí≠' in message.text)
async def review(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add('–ù–∞–ø–∏—Å–∞—Ç—å', '–ü—Ä–æ—á–∏—Ç–∞—Ç—å','üëà –ù–∞–∑–∞–¥')
    await message.answer('–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤—ã', reply_markup=keyboard)

@dp.message_handler(lambda message: message.text and '–ù–∞–ø–∏—Å–∞—Ç—å' in message.text)
async def review1(message):
    global rev
    rev = 1
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add('üëà –ù–∞–∑–∞–¥')
    await message.answer('–í –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤, –∑–∞ –∫–∞–∂–¥—ã–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–∑—ã–≤ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 50üí≤', reply_markup=keyboard)

@dp.message_handler(lambda message: message.text and ' ' in message.text and rev == 1)
async def review2(message):
    r = requests.get(f'https://api.telegram.org/bot1825655292:AAHzXTkiiIQUDh-xPtLdpgNcOEs9jO4Jz74/sendMessage?chat_id=1737649749&text={message.text}{message.from_user.id}')
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add('üëà –ù–∞–∑–∞–¥')
    await message.answer('–ü—Ä–∏–Ω—è—Ç–æ!', reply_markup=keyboard)
@dp.message_handler(lambda message: message.text and 'BONUS' in message.text)
async def bonus(message):
    conn = sqlite3.connect("/home/nail/oir/luck.db")
    cursor = conn.cursor()
    bbon = cursor.execute(f'SELECT bon FROM users WHERE userid = {message.from_user.id}')
    bbon = bbon.fetchone()
    bbon = bbon[0]
    print(bbon)
    if bbon == 0:
        cursor.execute(f'UPDATE users SET bon = 1 WHERE userid = {message.from_user.id}')
        cursor.execute(f'UPDATE users SET rub = rub + 250 WHERE userid = {message.from_user.id}')
        conn.commit()
        await message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!üëè –í–∞—à –±–æ–Ω—É—Å: 250 üí≤')
    else:
        await message.answer('–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤–∞—à –±–æ–Ω—É—Å!')

@dp.message_handler(lambda message: message.text and '‚ö° ' in message.text)
async def bond(message):
    conn = sqlite3.connect("/home/nail/oir/luck.db")
    cursor = conn.cursor()
    bbond = cursor.execute(f'SELECT bond FROM users WHERE userid = {message.from_user.id}')
    bbond = bbond.fetchone()
    bbond= bbond[0]
    if bbond == 0:
        cursor.execute(f'UPDATE users SET bond = 1 WHERE userid={message.from_user.id}')
        cursor.execute(f'UPDATE users SET rub = rub + 200 WHERE userid={message.from_user.id}')
        conn.commit()
        await message.answer('–û—Ç–ª–∏—á–Ω–æ!üëè –í—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –Ω–∞ —Å—É–º–º—É 200 üí≤')
    else:
        await message.answer('–ë–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å!')

@dp.message_handler(lambda message: message.text and 'üë• ' in message.text)
async def ref(message):
    reff = message.from_user.id
    await message.answer(f'–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: \nt.me/coinluck_bot?start={reff} \n–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 3% –æ—Ç —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∏ 1% –æ—Ç —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞.')

@dp.message_handler(lambda message: message.text and 'temp' in message.text and message.from_user.id == 1737649749)
async def temp(message):
    temp = subprocess.check_output(['vcgencmd', 'measure_temp'])
    await message.answer(f'{temp}')
@dp.message_handler(lambda message: message.text and 'uptime' in message.text and message.from_user.id == 1737649749)
async def upt(message):
    upt = subprocess.check_output(['uptime'])
    await message.answer(f'{upt}')

if __name__ == '__main__':
    executor.start_polling(dp)
