    #@dp.message_handler(lambda message: message.text and '‚ú® qswafukwafvb ' in message.text and selec(message) == 10)
    #async def buyvipfarm(message):
    #    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    #    keyboard.add('–ö—É–ø–∏—Ç—å VIPüçç','–ö—É–ø–∏—Ç—å VIPüêâ','–ö—É–ø–∏—Ç—å VIP‚≠ê',temps.back())
    #    await message.answer('–º–∞–≥–∞–∑', reply_markup=keyboard)
   
    #@dp.message_handler(lambda message: message.text and '–ö—É–ø–∏—Ç—å VIP wsuwarasdfkaw ' in message.text and selec(message) == 10)
    #async def buyvipfarm1(message):
    #    fruit = message.text[-1]
    #    if fruit == "üçç":
    #        fruitm = 99
    #    elif fruit == "üêâ":
    #        fruitm = 299
    #    elif fruit == "‚≠ê":
    #        fruitm = 499
    #    else:
    #        await message.answer('–ù–µ –º–æ–≥—É —Ç–µ–±—è –ø–æ–Ω—è—Ç—å')
    #    cursor = conn.cursor()
    #    cursor.execute(f"INSERT INTO req(userid, mon, app) VALUES({message.from_user.id}, {fruitm}, 0)")
    #    conn.commit()
    #    conn.close()
    #    opl = hashlib.md5(f'{merchant_id}:{fruitm}:{secret}:RUB:{message.from_user.id}'.encode('utf-8')).hexdigest()
    #    print(opl)
    #    urrl = f'https://pay.freekassa.ru/?m={merchant_id}&oa={fruitm}&o={message.from_user.id}&s={opl}&currency=RUB&us_key={fruitm}'
    #    markup = types.InlineKeyboardMarkup()
    #    btn_my_site= types.InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å', url=urrl)
    #    markup.add(btn_my_site)
    #    logging.info(f"{message.from_user.id} buy ")
    #    await message.answer(f'–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏', reply_markup = markup)
'''
import requests
import logging
from postgresso import *

def rev1(message):
    cursor = conn.cursor()
    cursor.execute(f'UPDATE users SET cc = 33 WHERE userid = {message.from_user.id}')
    conn.commit()
    cursor.close()

def rev2(message):
    r = requests.get(f'https://api.telegram.org/bot1825655292:AAHzXTkiiIQUDh-xPtLdpgNcOEs9jO4Jz74/sendMessage?chat_id=1737649749&text=z{message.text}\n{message.from_user.id}')
    logging.info(f"{message.from_user.id} wrote {message.text}")

def rev11(message):
    cursor = conn.cursor()
    cursor.execute(f'UPDATE users SET cc = 34 WHERE userid = {message.from_user.id}')
    conn.commit()
    cursor.close()


    @dp.message_handler(lambda message: message.text and 'üí≠' in message.text)
    async def review(message):
        rev1(message)
        rr = kb.rev(message)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(rr[0], rr[1], kb.back(message))
        await message.answer(temps.rev(message), reply_markup=keyboard)
        
        @dp.message_handler(lambda message: message.text and ('–ù–∞–ø–∏—Å–∞—Ç—å' in message.text or 'Write') and selec(message) == 33)
        async def review1(message):
            rev11(message)
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add(kb.back(message))
            await message.answer(temps.goodrev(message), reply_markup=keyboard)
            
            @dp.message_handler(lambda message: message.text and ' ' in message.text and selec(message) == 34)
            async def review2(message):
                rev2(message)
                keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
                keyboard.add(kb.back(message))
                await message.answer(temps.succ(message), reply_markup=keyboard)


        def rev(message):
            if langich(message) == "English":
                return('Here you can read or write reviews')
            else:
                return('–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤—ã')
        def goodrev(message):
            if langich(message) == "English":
                return('In reply message you can place your review, for every quality review you will recieve 50 üí≤')
            else:
                return('–í –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤, –∑–∞ –∫–∞–∂–¥—ã–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–∑—ã–≤ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 50 üí≤')

            
    def rev(message):
        if langich(message) == "English":
            return ('Messages', 'Friends')
        else:
            return ('–°–æ–æ–±—â–µ–Ω–∏—è', '–î—Ä—É–∑—å—è')
'''

'''
import requests
from postgresso import *

def vivod1(message):
    cursor = conn.cursor()
    cursor.execute(f'UPDATE users SET cc = 6886990 WHERE userid = {message.from_user.id}')
    conn.commit()

def vivod2(message):
    r = requests.get(f'https://api.telegram.org/bot1825655292:AAHzXTkiiIQUDh-xPtLdpgNcOEs9jO4Jz74/sendMessage?chat_id=1737649749&text={message.text}')


@dp.message_handler(lambda message: message.text and '‚¨Ü' in message.text and selec(message) == 6886)
        async def vivbalance(message):
            vivod1(message)
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add(kb.back(message))
            await message.answer(temps.viv(message), reply_markup=keyboard)
        
            @dp.message_handler(lambda message: message.text and ' ' in message.text and selec(message) == 6886990)
            async def vivbalance(message):
                vivod2(message)
                await message.answer(temps.viv2(message), reply_markup=keyboard)
        def viv(message):
            if langich(message) == "English":
                return('In reply message enter the amount and requisites\nCourse: 100 üí∏ = 1 ‚ÇΩ\nExample: 20000 qiwi +79XXXXXXXXX.')
            else:
                return('–í –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞ –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã\n–ö—É—Ä—Å: 100 üí∏ = 1 ‚ÇΩ\n–ü—Ä–∏–º–µ—Ä: 20000 –Ω–∞ –∫–∏–≤–∏ +79XXXXXXXXX.')
        def viv2(message):
            if langich(message) == "English":
                return('Application sent!')
            else:
                return('–ó–∞—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')
        '''